 the same model incrementally via the add() method,which is similar to the append() method of a Python list.model = keras.Sequential()model.add(layers.Dense(64, activation="relu"))model.add(layers.Dense(10, activation="softmax"))You saw in chapter 4 that layers only get built (which is to say, create their weights) whenthey are called for the first time. That’s because the shape of the layers' weights dependson the shape of their input: until the input shape is known, they can’t be created. As such, the preceding Sequential model does not have any weights (listing 7.3)until you actually call it on some data, or call its build() method with an input shape(listing 7.4).>>> model.weights       ValueError: Weights for model sequential_1 have not yet been created.>>> model.build(input_shape=(None, 3))     >>> model.weights                       [<tf.Variable "dense_2/kernel:0" shape=(3, 64) dtype=float32, ... >, <tf.Variable "dense_2/bias:0" shape=(64,) dtype=float32, ... > <tf.Variable "dense_3/kernel:0" shape=(64, 10) dtype=float32, ... >, <tf.Variable "dense_3/bias:0" shape=(10,) dtype=float32, ... >]After the model is built, you can display its contents via the summary() method, whichcomes in handy for debugging.Listing 7.1 The Sequential class
Listing 7.2 Incrementally building a Sequential model
Listing 7.3 Models that aren’t yet built have no weightsListing 7.4 Calling a model for the first time to build itAt that point, the model isn’t built yet.